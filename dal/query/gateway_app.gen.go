// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gopl.io/dal/model"
)

func newGatewayApp(db *gorm.DB) gatewayApp {
	_gatewayApp := gatewayApp{}

	_gatewayApp.gatewayAppDo.UseDB(db)
	_gatewayApp.gatewayAppDo.UseModel(&model.GatewayApp{})

	tableName := _gatewayApp.gatewayAppDo.TableName()
	_gatewayApp.ALL = field.NewField(tableName, "*")
	_gatewayApp.ID = field.NewInt64(tableName, "id")
	_gatewayApp.AppID = field.NewString(tableName, "app_id")
	_gatewayApp.Name = field.NewString(tableName, "name")
	_gatewayApp.Secret = field.NewString(tableName, "secret")
	_gatewayApp.WhiteIps = field.NewString(tableName, "white_ips")
	_gatewayApp.Qpd = field.NewInt64(tableName, "qpd")
	_gatewayApp.QPS = field.NewInt64(tableName, "qps")
	_gatewayApp.CreateAt = field.NewTime(tableName, "create_at")
	_gatewayApp.UpdateAt = field.NewTime(tableName, "update_at")
	_gatewayApp.IsDelete = field.NewInt8(tableName, "is_delete")

	_gatewayApp.fillFieldMap()

	return _gatewayApp
}

type gatewayApp struct {
	gatewayAppDo gatewayAppDo

	ALL      field.Field
	ID       field.Int64
	AppID    field.String
	Name     field.String
	Secret   field.String
	WhiteIps field.String
	Qpd      field.Int64
	QPS      field.Int64
	CreateAt field.Time
	UpdateAt field.Time
	IsDelete field.Int8

	fieldMap map[string]field.Expr
}

func (g gatewayApp) Table(newTableName string) *gatewayApp {
	g.gatewayAppDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gatewayApp) As(alias string) *gatewayApp {
	g.gatewayAppDo.DO = *(g.gatewayAppDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gatewayApp) updateTableName(table string) *gatewayApp {
	g.ALL = field.NewField(table, "*")
	g.ID = field.NewInt64(table, "id")
	g.AppID = field.NewString(table, "app_id")
	g.Name = field.NewString(table, "name")
	g.Secret = field.NewString(table, "secret")
	g.WhiteIps = field.NewString(table, "white_ips")
	g.Qpd = field.NewInt64(table, "qpd")
	g.QPS = field.NewInt64(table, "qps")
	g.CreateAt = field.NewTime(table, "create_at")
	g.UpdateAt = field.NewTime(table, "update_at")
	g.IsDelete = field.NewInt8(table, "is_delete")

	g.fillFieldMap()

	return g
}

func (g *gatewayApp) WithContext(ctx context.Context) *gatewayAppDo {
	return g.gatewayAppDo.WithContext(ctx)
}

func (g gatewayApp) TableName() string { return g.gatewayAppDo.TableName() }

func (g gatewayApp) Alias() string { return g.gatewayAppDo.Alias() }

func (g *gatewayApp) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gatewayApp) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 10)
	g.fieldMap["id"] = g.ID
	g.fieldMap["app_id"] = g.AppID
	g.fieldMap["name"] = g.Name
	g.fieldMap["secret"] = g.Secret
	g.fieldMap["white_ips"] = g.WhiteIps
	g.fieldMap["qpd"] = g.Qpd
	g.fieldMap["qps"] = g.QPS
	g.fieldMap["create_at"] = g.CreateAt
	g.fieldMap["update_at"] = g.UpdateAt
	g.fieldMap["is_delete"] = g.IsDelete
}

func (g gatewayApp) clone(db *gorm.DB) gatewayApp {
	g.gatewayAppDo.ReplaceDB(db)
	return g
}

type gatewayAppDo struct{ gen.DO }

func (g gatewayAppDo) Debug() *gatewayAppDo {
	return g.withDO(g.DO.Debug())
}

func (g gatewayAppDo) WithContext(ctx context.Context) *gatewayAppDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gatewayAppDo) Clauses(conds ...clause.Expression) *gatewayAppDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gatewayAppDo) Returning(value interface{}, columns ...string) *gatewayAppDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gatewayAppDo) Not(conds ...gen.Condition) *gatewayAppDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gatewayAppDo) Or(conds ...gen.Condition) *gatewayAppDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gatewayAppDo) Select(conds ...field.Expr) *gatewayAppDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gatewayAppDo) Where(conds ...gen.Condition) *gatewayAppDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gatewayAppDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *gatewayAppDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g gatewayAppDo) Order(conds ...field.Expr) *gatewayAppDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gatewayAppDo) Distinct(cols ...field.Expr) *gatewayAppDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gatewayAppDo) Omit(cols ...field.Expr) *gatewayAppDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gatewayAppDo) Join(table schema.Tabler, on ...field.Expr) *gatewayAppDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gatewayAppDo) LeftJoin(table schema.Tabler, on ...field.Expr) *gatewayAppDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gatewayAppDo) RightJoin(table schema.Tabler, on ...field.Expr) *gatewayAppDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gatewayAppDo) Group(cols ...field.Expr) *gatewayAppDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gatewayAppDo) Having(conds ...gen.Condition) *gatewayAppDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gatewayAppDo) Limit(limit int) *gatewayAppDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gatewayAppDo) Offset(offset int) *gatewayAppDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gatewayAppDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *gatewayAppDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gatewayAppDo) Unscoped() *gatewayAppDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gatewayAppDo) Create(values ...*model.GatewayApp) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gatewayAppDo) CreateInBatches(values []*model.GatewayApp, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gatewayAppDo) Save(values ...*model.GatewayApp) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gatewayAppDo) First() (*model.GatewayApp, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayApp), nil
	}
}

func (g gatewayAppDo) Take() (*model.GatewayApp, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayApp), nil
	}
}

func (g gatewayAppDo) Last() (*model.GatewayApp, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayApp), nil
	}
}

func (g gatewayAppDo) Find() ([]*model.GatewayApp, error) {
	result, err := g.DO.Find()
	return result.([]*model.GatewayApp), err
}

func (g gatewayAppDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GatewayApp, err error) {
	buf := make([]*model.GatewayApp, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gatewayAppDo) FindInBatches(result *[]*model.GatewayApp, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gatewayAppDo) Attrs(attrs ...field.AssignExpr) *gatewayAppDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gatewayAppDo) Assign(attrs ...field.AssignExpr) *gatewayAppDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gatewayAppDo) Joins(fields ...field.RelationField) *gatewayAppDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gatewayAppDo) Preload(fields ...field.RelationField) *gatewayAppDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gatewayAppDo) FirstOrInit() (*model.GatewayApp, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayApp), nil
	}
}

func (g gatewayAppDo) FirstOrCreate() (*model.GatewayApp, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayApp), nil
	}
}

func (g gatewayAppDo) FindByPage(offset int, limit int) (result []*model.GatewayApp, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gatewayAppDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g *gatewayAppDo) withDO(do gen.Dao) *gatewayAppDo {
	g.DO = *do.(*gen.DO)
	return g
}
