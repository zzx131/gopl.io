// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gopl.io/dal/model"
)

func newGatewayServiceHTTPRule(db *gorm.DB) gatewayServiceHTTPRule {
	_gatewayServiceHTTPRule := gatewayServiceHTTPRule{}

	_gatewayServiceHTTPRule.gatewayServiceHTTPRuleDo.UseDB(db)
	_gatewayServiceHTTPRule.gatewayServiceHTTPRuleDo.UseModel(&model.GatewayServiceHTTPRule{})

	tableName := _gatewayServiceHTTPRule.gatewayServiceHTTPRuleDo.TableName()
	_gatewayServiceHTTPRule.ALL = field.NewField(tableName, "*")
	_gatewayServiceHTTPRule.ID = field.NewInt64(tableName, "id")
	_gatewayServiceHTTPRule.ServiceID = field.NewInt64(tableName, "service_id")
	_gatewayServiceHTTPRule.RuleType = field.NewInt8(tableName, "rule_type")
	_gatewayServiceHTTPRule.Rule = field.NewString(tableName, "rule")
	_gatewayServiceHTTPRule.NeedHTTPS = field.NewInt8(tableName, "need_https")
	_gatewayServiceHTTPRule.NeedStripURI = field.NewInt8(tableName, "need_strip_uri")
	_gatewayServiceHTTPRule.NeedWebsocket = field.NewInt8(tableName, "need_websocket")
	_gatewayServiceHTTPRule.URLRewrite = field.NewString(tableName, "url_rewrite")
	_gatewayServiceHTTPRule.HeaderTransfor = field.NewString(tableName, "header_transfor")

	_gatewayServiceHTTPRule.fillFieldMap()

	return _gatewayServiceHTTPRule
}

type gatewayServiceHTTPRule struct {
	gatewayServiceHTTPRuleDo gatewayServiceHTTPRuleDo

	ALL            field.Field
	ID             field.Int64
	ServiceID      field.Int64
	RuleType       field.Int8
	Rule           field.String
	NeedHTTPS      field.Int8
	NeedStripURI   field.Int8
	NeedWebsocket  field.Int8
	URLRewrite     field.String
	HeaderTransfor field.String

	fieldMap map[string]field.Expr
}

func (g gatewayServiceHTTPRule) Table(newTableName string) *gatewayServiceHTTPRule {
	g.gatewayServiceHTTPRuleDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gatewayServiceHTTPRule) As(alias string) *gatewayServiceHTTPRule {
	g.gatewayServiceHTTPRuleDo.DO = *(g.gatewayServiceHTTPRuleDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gatewayServiceHTTPRule) updateTableName(table string) *gatewayServiceHTTPRule {
	g.ALL = field.NewField(table, "*")
	g.ID = field.NewInt64(table, "id")
	g.ServiceID = field.NewInt64(table, "service_id")
	g.RuleType = field.NewInt8(table, "rule_type")
	g.Rule = field.NewString(table, "rule")
	g.NeedHTTPS = field.NewInt8(table, "need_https")
	g.NeedStripURI = field.NewInt8(table, "need_strip_uri")
	g.NeedWebsocket = field.NewInt8(table, "need_websocket")
	g.URLRewrite = field.NewString(table, "url_rewrite")
	g.HeaderTransfor = field.NewString(table, "header_transfor")

	g.fillFieldMap()

	return g
}

func (g *gatewayServiceHTTPRule) WithContext(ctx context.Context) *gatewayServiceHTTPRuleDo {
	return g.gatewayServiceHTTPRuleDo.WithContext(ctx)
}

func (g gatewayServiceHTTPRule) TableName() string { return g.gatewayServiceHTTPRuleDo.TableName() }

func (g gatewayServiceHTTPRule) Alias() string { return g.gatewayServiceHTTPRuleDo.Alias() }

func (g *gatewayServiceHTTPRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gatewayServiceHTTPRule) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 9)
	g.fieldMap["id"] = g.ID
	g.fieldMap["service_id"] = g.ServiceID
	g.fieldMap["rule_type"] = g.RuleType
	g.fieldMap["rule"] = g.Rule
	g.fieldMap["need_https"] = g.NeedHTTPS
	g.fieldMap["need_strip_uri"] = g.NeedStripURI
	g.fieldMap["need_websocket"] = g.NeedWebsocket
	g.fieldMap["url_rewrite"] = g.URLRewrite
	g.fieldMap["header_transfor"] = g.HeaderTransfor
}

func (g gatewayServiceHTTPRule) clone(db *gorm.DB) gatewayServiceHTTPRule {
	g.gatewayServiceHTTPRuleDo.ReplaceDB(db)
	return g
}

type gatewayServiceHTTPRuleDo struct{ gen.DO }

func (g gatewayServiceHTTPRuleDo) Debug() *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.Debug())
}

func (g gatewayServiceHTTPRuleDo) WithContext(ctx context.Context) *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gatewayServiceHTTPRuleDo) Clauses(conds ...clause.Expression) *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gatewayServiceHTTPRuleDo) Returning(value interface{}, columns ...string) *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gatewayServiceHTTPRuleDo) Not(conds ...gen.Condition) *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gatewayServiceHTTPRuleDo) Or(conds ...gen.Condition) *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gatewayServiceHTTPRuleDo) Select(conds ...field.Expr) *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gatewayServiceHTTPRuleDo) Where(conds ...gen.Condition) *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gatewayServiceHTTPRuleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *gatewayServiceHTTPRuleDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g gatewayServiceHTTPRuleDo) Order(conds ...field.Expr) *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gatewayServiceHTTPRuleDo) Distinct(cols ...field.Expr) *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gatewayServiceHTTPRuleDo) Omit(cols ...field.Expr) *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gatewayServiceHTTPRuleDo) Join(table schema.Tabler, on ...field.Expr) *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gatewayServiceHTTPRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gatewayServiceHTTPRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gatewayServiceHTTPRuleDo) Group(cols ...field.Expr) *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gatewayServiceHTTPRuleDo) Having(conds ...gen.Condition) *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gatewayServiceHTTPRuleDo) Limit(limit int) *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gatewayServiceHTTPRuleDo) Offset(offset int) *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gatewayServiceHTTPRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gatewayServiceHTTPRuleDo) Unscoped() *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gatewayServiceHTTPRuleDo) Create(values ...*model.GatewayServiceHTTPRule) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gatewayServiceHTTPRuleDo) CreateInBatches(values []*model.GatewayServiceHTTPRule, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gatewayServiceHTTPRuleDo) Save(values ...*model.GatewayServiceHTTPRule) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gatewayServiceHTTPRuleDo) First() (*model.GatewayServiceHTTPRule, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceHTTPRule), nil
	}
}

func (g gatewayServiceHTTPRuleDo) Take() (*model.GatewayServiceHTTPRule, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceHTTPRule), nil
	}
}

func (g gatewayServiceHTTPRuleDo) Last() (*model.GatewayServiceHTTPRule, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceHTTPRule), nil
	}
}

func (g gatewayServiceHTTPRuleDo) Find() ([]*model.GatewayServiceHTTPRule, error) {
	result, err := g.DO.Find()
	return result.([]*model.GatewayServiceHTTPRule), err
}

func (g gatewayServiceHTTPRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GatewayServiceHTTPRule, err error) {
	buf := make([]*model.GatewayServiceHTTPRule, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gatewayServiceHTTPRuleDo) FindInBatches(result *[]*model.GatewayServiceHTTPRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gatewayServiceHTTPRuleDo) Attrs(attrs ...field.AssignExpr) *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gatewayServiceHTTPRuleDo) Assign(attrs ...field.AssignExpr) *gatewayServiceHTTPRuleDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gatewayServiceHTTPRuleDo) Joins(fields ...field.RelationField) *gatewayServiceHTTPRuleDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gatewayServiceHTTPRuleDo) Preload(fields ...field.RelationField) *gatewayServiceHTTPRuleDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gatewayServiceHTTPRuleDo) FirstOrInit() (*model.GatewayServiceHTTPRule, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceHTTPRule), nil
	}
}

func (g gatewayServiceHTTPRuleDo) FirstOrCreate() (*model.GatewayServiceHTTPRule, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceHTTPRule), nil
	}
}

func (g gatewayServiceHTTPRuleDo) FindByPage(offset int, limit int) (result []*model.GatewayServiceHTTPRule, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gatewayServiceHTTPRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g *gatewayServiceHTTPRuleDo) withDO(do gen.Dao) *gatewayServiceHTTPRuleDo {
	g.DO = *do.(*gen.DO)
	return g
}
