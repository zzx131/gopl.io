// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gopl.io/dal/model"
)

func newGatewayServiceInfo(db *gorm.DB) gatewayServiceInfo {
	_gatewayServiceInfo := gatewayServiceInfo{}

	_gatewayServiceInfo.gatewayServiceInfoDo.UseDB(db)
	_gatewayServiceInfo.gatewayServiceInfoDo.UseModel(&model.GatewayServiceInfo{})

	tableName := _gatewayServiceInfo.gatewayServiceInfoDo.TableName()
	_gatewayServiceInfo.ALL = field.NewField(tableName, "*")
	_gatewayServiceInfo.ID = field.NewInt64(tableName, "id")
	_gatewayServiceInfo.LoadType = field.NewInt8(tableName, "load_type")
	_gatewayServiceInfo.ServiceName = field.NewString(tableName, "service_name")
	_gatewayServiceInfo.ServiceDesc = field.NewString(tableName, "service_desc")
	_gatewayServiceInfo.CreateAt = field.NewTime(tableName, "create_at")
	_gatewayServiceInfo.UpdateAt = field.NewTime(tableName, "update_at")
	_gatewayServiceInfo.IsDelete = field.NewInt8(tableName, "is_delete")

	_gatewayServiceInfo.fillFieldMap()

	return _gatewayServiceInfo
}

type gatewayServiceInfo struct {
	gatewayServiceInfoDo gatewayServiceInfoDo

	ALL         field.Field
	ID          field.Int64
	LoadType    field.Int8
	ServiceName field.String
	ServiceDesc field.String
	CreateAt    field.Time
	UpdateAt    field.Time
	IsDelete    field.Int8

	fieldMap map[string]field.Expr
}

func (g gatewayServiceInfo) Table(newTableName string) *gatewayServiceInfo {
	g.gatewayServiceInfoDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gatewayServiceInfo) As(alias string) *gatewayServiceInfo {
	g.gatewayServiceInfoDo.DO = *(g.gatewayServiceInfoDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gatewayServiceInfo) updateTableName(table string) *gatewayServiceInfo {
	g.ALL = field.NewField(table, "*")
	g.ID = field.NewInt64(table, "id")
	g.LoadType = field.NewInt8(table, "load_type")
	g.ServiceName = field.NewString(table, "service_name")
	g.ServiceDesc = field.NewString(table, "service_desc")
	g.CreateAt = field.NewTime(table, "create_at")
	g.UpdateAt = field.NewTime(table, "update_at")
	g.IsDelete = field.NewInt8(table, "is_delete")

	g.fillFieldMap()

	return g
}

func (g *gatewayServiceInfo) WithContext(ctx context.Context) *gatewayServiceInfoDo {
	return g.gatewayServiceInfoDo.WithContext(ctx)
}

func (g gatewayServiceInfo) TableName() string { return g.gatewayServiceInfoDo.TableName() }

func (g gatewayServiceInfo) Alias() string { return g.gatewayServiceInfoDo.Alias() }

func (g *gatewayServiceInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gatewayServiceInfo) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 7)
	g.fieldMap["id"] = g.ID
	g.fieldMap["load_type"] = g.LoadType
	g.fieldMap["service_name"] = g.ServiceName
	g.fieldMap["service_desc"] = g.ServiceDesc
	g.fieldMap["create_at"] = g.CreateAt
	g.fieldMap["update_at"] = g.UpdateAt
	g.fieldMap["is_delete"] = g.IsDelete
}

func (g gatewayServiceInfo) clone(db *gorm.DB) gatewayServiceInfo {
	g.gatewayServiceInfoDo.ReplaceDB(db)
	return g
}

type gatewayServiceInfoDo struct{ gen.DO }

func (g gatewayServiceInfoDo) Debug() *gatewayServiceInfoDo {
	return g.withDO(g.DO.Debug())
}

func (g gatewayServiceInfoDo) WithContext(ctx context.Context) *gatewayServiceInfoDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gatewayServiceInfoDo) Clauses(conds ...clause.Expression) *gatewayServiceInfoDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gatewayServiceInfoDo) Returning(value interface{}, columns ...string) *gatewayServiceInfoDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gatewayServiceInfoDo) Not(conds ...gen.Condition) *gatewayServiceInfoDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gatewayServiceInfoDo) Or(conds ...gen.Condition) *gatewayServiceInfoDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gatewayServiceInfoDo) Select(conds ...field.Expr) *gatewayServiceInfoDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gatewayServiceInfoDo) Where(conds ...gen.Condition) *gatewayServiceInfoDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gatewayServiceInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *gatewayServiceInfoDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g gatewayServiceInfoDo) Order(conds ...field.Expr) *gatewayServiceInfoDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gatewayServiceInfoDo) Distinct(cols ...field.Expr) *gatewayServiceInfoDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gatewayServiceInfoDo) Omit(cols ...field.Expr) *gatewayServiceInfoDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gatewayServiceInfoDo) Join(table schema.Tabler, on ...field.Expr) *gatewayServiceInfoDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gatewayServiceInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *gatewayServiceInfoDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gatewayServiceInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *gatewayServiceInfoDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gatewayServiceInfoDo) Group(cols ...field.Expr) *gatewayServiceInfoDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gatewayServiceInfoDo) Having(conds ...gen.Condition) *gatewayServiceInfoDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gatewayServiceInfoDo) Limit(limit int) *gatewayServiceInfoDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gatewayServiceInfoDo) Offset(offset int) *gatewayServiceInfoDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gatewayServiceInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *gatewayServiceInfoDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gatewayServiceInfoDo) Unscoped() *gatewayServiceInfoDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gatewayServiceInfoDo) Create(values ...*model.GatewayServiceInfo) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gatewayServiceInfoDo) CreateInBatches(values []*model.GatewayServiceInfo, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gatewayServiceInfoDo) Save(values ...*model.GatewayServiceInfo) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gatewayServiceInfoDo) First() (*model.GatewayServiceInfo, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceInfo), nil
	}
}

func (g gatewayServiceInfoDo) Take() (*model.GatewayServiceInfo, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceInfo), nil
	}
}

func (g gatewayServiceInfoDo) Last() (*model.GatewayServiceInfo, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceInfo), nil
	}
}

func (g gatewayServiceInfoDo) Find() ([]*model.GatewayServiceInfo, error) {
	result, err := g.DO.Find()
	return result.([]*model.GatewayServiceInfo), err
}

func (g gatewayServiceInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GatewayServiceInfo, err error) {
	buf := make([]*model.GatewayServiceInfo, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gatewayServiceInfoDo) FindInBatches(result *[]*model.GatewayServiceInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gatewayServiceInfoDo) Attrs(attrs ...field.AssignExpr) *gatewayServiceInfoDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gatewayServiceInfoDo) Assign(attrs ...field.AssignExpr) *gatewayServiceInfoDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gatewayServiceInfoDo) Joins(fields ...field.RelationField) *gatewayServiceInfoDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gatewayServiceInfoDo) Preload(fields ...field.RelationField) *gatewayServiceInfoDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gatewayServiceInfoDo) FirstOrInit() (*model.GatewayServiceInfo, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceInfo), nil
	}
}

func (g gatewayServiceInfoDo) FirstOrCreate() (*model.GatewayServiceInfo, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceInfo), nil
	}
}

func (g gatewayServiceInfoDo) FindByPage(offset int, limit int) (result []*model.GatewayServiceInfo, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gatewayServiceInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g *gatewayServiceInfoDo) withDO(do gen.Dao) *gatewayServiceInfoDo {
	g.DO = *do.(*gen.DO)
	return g
}
