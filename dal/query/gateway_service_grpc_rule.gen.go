// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gopl.io/dal/model"
)

func newGatewayServiceGrpcRule(db *gorm.DB) gatewayServiceGrpcRule {
	_gatewayServiceGrpcRule := gatewayServiceGrpcRule{}

	_gatewayServiceGrpcRule.gatewayServiceGrpcRuleDo.UseDB(db)
	_gatewayServiceGrpcRule.gatewayServiceGrpcRuleDo.UseModel(&model.GatewayServiceGrpcRule{})

	tableName := _gatewayServiceGrpcRule.gatewayServiceGrpcRuleDo.TableName()
	_gatewayServiceGrpcRule.ALL = field.NewField(tableName, "*")
	_gatewayServiceGrpcRule.ID = field.NewInt64(tableName, "id")
	_gatewayServiceGrpcRule.ServiceID = field.NewInt64(tableName, "service_id")
	_gatewayServiceGrpcRule.Port = field.NewInt64(tableName, "port")
	_gatewayServiceGrpcRule.HeaderTransfor = field.NewString(tableName, "header_transfor")

	_gatewayServiceGrpcRule.fillFieldMap()

	return _gatewayServiceGrpcRule
}

type gatewayServiceGrpcRule struct {
	gatewayServiceGrpcRuleDo gatewayServiceGrpcRuleDo

	ALL            field.Field
	ID             field.Int64
	ServiceID      field.Int64
	Port           field.Int64
	HeaderTransfor field.String

	fieldMap map[string]field.Expr
}

func (g gatewayServiceGrpcRule) Table(newTableName string) *gatewayServiceGrpcRule {
	g.gatewayServiceGrpcRuleDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gatewayServiceGrpcRule) As(alias string) *gatewayServiceGrpcRule {
	g.gatewayServiceGrpcRuleDo.DO = *(g.gatewayServiceGrpcRuleDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gatewayServiceGrpcRule) updateTableName(table string) *gatewayServiceGrpcRule {
	g.ALL = field.NewField(table, "*")
	g.ID = field.NewInt64(table, "id")
	g.ServiceID = field.NewInt64(table, "service_id")
	g.Port = field.NewInt64(table, "port")
	g.HeaderTransfor = field.NewString(table, "header_transfor")

	g.fillFieldMap()

	return g
}

func (g *gatewayServiceGrpcRule) WithContext(ctx context.Context) *gatewayServiceGrpcRuleDo {
	return g.gatewayServiceGrpcRuleDo.WithContext(ctx)
}

func (g gatewayServiceGrpcRule) TableName() string { return g.gatewayServiceGrpcRuleDo.TableName() }

func (g gatewayServiceGrpcRule) Alias() string { return g.gatewayServiceGrpcRuleDo.Alias() }

func (g *gatewayServiceGrpcRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gatewayServiceGrpcRule) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 4)
	g.fieldMap["id"] = g.ID
	g.fieldMap["service_id"] = g.ServiceID
	g.fieldMap["port"] = g.Port
	g.fieldMap["header_transfor"] = g.HeaderTransfor
}

func (g gatewayServiceGrpcRule) clone(db *gorm.DB) gatewayServiceGrpcRule {
	g.gatewayServiceGrpcRuleDo.ReplaceDB(db)
	return g
}

type gatewayServiceGrpcRuleDo struct{ gen.DO }

func (g gatewayServiceGrpcRuleDo) Debug() *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.Debug())
}

func (g gatewayServiceGrpcRuleDo) WithContext(ctx context.Context) *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gatewayServiceGrpcRuleDo) Clauses(conds ...clause.Expression) *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gatewayServiceGrpcRuleDo) Returning(value interface{}, columns ...string) *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gatewayServiceGrpcRuleDo) Not(conds ...gen.Condition) *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gatewayServiceGrpcRuleDo) Or(conds ...gen.Condition) *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gatewayServiceGrpcRuleDo) Select(conds ...field.Expr) *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gatewayServiceGrpcRuleDo) Where(conds ...gen.Condition) *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gatewayServiceGrpcRuleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *gatewayServiceGrpcRuleDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g gatewayServiceGrpcRuleDo) Order(conds ...field.Expr) *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gatewayServiceGrpcRuleDo) Distinct(cols ...field.Expr) *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gatewayServiceGrpcRuleDo) Omit(cols ...field.Expr) *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gatewayServiceGrpcRuleDo) Join(table schema.Tabler, on ...field.Expr) *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gatewayServiceGrpcRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gatewayServiceGrpcRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gatewayServiceGrpcRuleDo) Group(cols ...field.Expr) *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gatewayServiceGrpcRuleDo) Having(conds ...gen.Condition) *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gatewayServiceGrpcRuleDo) Limit(limit int) *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gatewayServiceGrpcRuleDo) Offset(offset int) *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gatewayServiceGrpcRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gatewayServiceGrpcRuleDo) Unscoped() *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gatewayServiceGrpcRuleDo) Create(values ...*model.GatewayServiceGrpcRule) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gatewayServiceGrpcRuleDo) CreateInBatches(values []*model.GatewayServiceGrpcRule, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gatewayServiceGrpcRuleDo) Save(values ...*model.GatewayServiceGrpcRule) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gatewayServiceGrpcRuleDo) First() (*model.GatewayServiceGrpcRule, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceGrpcRule), nil
	}
}

func (g gatewayServiceGrpcRuleDo) Take() (*model.GatewayServiceGrpcRule, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceGrpcRule), nil
	}
}

func (g gatewayServiceGrpcRuleDo) Last() (*model.GatewayServiceGrpcRule, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceGrpcRule), nil
	}
}

func (g gatewayServiceGrpcRuleDo) Find() ([]*model.GatewayServiceGrpcRule, error) {
	result, err := g.DO.Find()
	return result.([]*model.GatewayServiceGrpcRule), err
}

func (g gatewayServiceGrpcRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GatewayServiceGrpcRule, err error) {
	buf := make([]*model.GatewayServiceGrpcRule, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gatewayServiceGrpcRuleDo) FindInBatches(result *[]*model.GatewayServiceGrpcRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gatewayServiceGrpcRuleDo) Attrs(attrs ...field.AssignExpr) *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gatewayServiceGrpcRuleDo) Assign(attrs ...field.AssignExpr) *gatewayServiceGrpcRuleDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gatewayServiceGrpcRuleDo) Joins(fields ...field.RelationField) *gatewayServiceGrpcRuleDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gatewayServiceGrpcRuleDo) Preload(fields ...field.RelationField) *gatewayServiceGrpcRuleDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gatewayServiceGrpcRuleDo) FirstOrInit() (*model.GatewayServiceGrpcRule, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceGrpcRule), nil
	}
}

func (g gatewayServiceGrpcRuleDo) FirstOrCreate() (*model.GatewayServiceGrpcRule, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceGrpcRule), nil
	}
}

func (g gatewayServiceGrpcRuleDo) FindByPage(offset int, limit int) (result []*model.GatewayServiceGrpcRule, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gatewayServiceGrpcRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g *gatewayServiceGrpcRuleDo) withDO(do gen.Dao) *gatewayServiceGrpcRuleDo {
	g.DO = *do.(*gen.DO)
	return g
}
