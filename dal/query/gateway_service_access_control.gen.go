// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gopl.io/dal/model"
)

func newGatewayServiceAccessControl(db *gorm.DB) gatewayServiceAccessControl {
	_gatewayServiceAccessControl := gatewayServiceAccessControl{}

	_gatewayServiceAccessControl.gatewayServiceAccessControlDo.UseDB(db)
	_gatewayServiceAccessControl.gatewayServiceAccessControlDo.UseModel(&model.GatewayServiceAccessControl{})

	tableName := _gatewayServiceAccessControl.gatewayServiceAccessControlDo.TableName()
	_gatewayServiceAccessControl.ALL = field.NewField(tableName, "*")
	_gatewayServiceAccessControl.ID = field.NewInt64(tableName, "id")
	_gatewayServiceAccessControl.ServiceID = field.NewInt64(tableName, "service_id")
	_gatewayServiceAccessControl.OpenAuth = field.NewInt8(tableName, "open_auth")
	_gatewayServiceAccessControl.BlackList = field.NewString(tableName, "black_list")
	_gatewayServiceAccessControl.WhiteList = field.NewString(tableName, "white_list")
	_gatewayServiceAccessControl.WhiteHostName = field.NewString(tableName, "white_host_name")
	_gatewayServiceAccessControl.ClientipFlowLimit = field.NewInt64(tableName, "clientip_flow_limit")
	_gatewayServiceAccessControl.ServiceFlowLimit = field.NewInt64(tableName, "service_flow_limit")

	_gatewayServiceAccessControl.fillFieldMap()

	return _gatewayServiceAccessControl
}

type gatewayServiceAccessControl struct {
	gatewayServiceAccessControlDo gatewayServiceAccessControlDo

	ALL               field.Field
	ID                field.Int64
	ServiceID         field.Int64
	OpenAuth          field.Int8
	BlackList         field.String
	WhiteList         field.String
	WhiteHostName     field.String
	ClientipFlowLimit field.Int64
	ServiceFlowLimit  field.Int64

	fieldMap map[string]field.Expr
}

func (g gatewayServiceAccessControl) Table(newTableName string) *gatewayServiceAccessControl {
	g.gatewayServiceAccessControlDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gatewayServiceAccessControl) As(alias string) *gatewayServiceAccessControl {
	g.gatewayServiceAccessControlDo.DO = *(g.gatewayServiceAccessControlDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gatewayServiceAccessControl) updateTableName(table string) *gatewayServiceAccessControl {
	g.ALL = field.NewField(table, "*")
	g.ID = field.NewInt64(table, "id")
	g.ServiceID = field.NewInt64(table, "service_id")
	g.OpenAuth = field.NewInt8(table, "open_auth")
	g.BlackList = field.NewString(table, "black_list")
	g.WhiteList = field.NewString(table, "white_list")
	g.WhiteHostName = field.NewString(table, "white_host_name")
	g.ClientipFlowLimit = field.NewInt64(table, "clientip_flow_limit")
	g.ServiceFlowLimit = field.NewInt64(table, "service_flow_limit")

	g.fillFieldMap()

	return g
}

func (g *gatewayServiceAccessControl) WithContext(ctx context.Context) *gatewayServiceAccessControlDo {
	return g.gatewayServiceAccessControlDo.WithContext(ctx)
}

func (g gatewayServiceAccessControl) TableName() string {
	return g.gatewayServiceAccessControlDo.TableName()
}

func (g gatewayServiceAccessControl) Alias() string { return g.gatewayServiceAccessControlDo.Alias() }

func (g *gatewayServiceAccessControl) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gatewayServiceAccessControl) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 8)
	g.fieldMap["id"] = g.ID
	g.fieldMap["service_id"] = g.ServiceID
	g.fieldMap["open_auth"] = g.OpenAuth
	g.fieldMap["black_list"] = g.BlackList
	g.fieldMap["white_list"] = g.WhiteList
	g.fieldMap["white_host_name"] = g.WhiteHostName
	g.fieldMap["clientip_flow_limit"] = g.ClientipFlowLimit
	g.fieldMap["service_flow_limit"] = g.ServiceFlowLimit
}

func (g gatewayServiceAccessControl) clone(db *gorm.DB) gatewayServiceAccessControl {
	g.gatewayServiceAccessControlDo.ReplaceDB(db)
	return g
}

type gatewayServiceAccessControlDo struct{ gen.DO }

func (g gatewayServiceAccessControlDo) Debug() *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.Debug())
}

func (g gatewayServiceAccessControlDo) WithContext(ctx context.Context) *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gatewayServiceAccessControlDo) Clauses(conds ...clause.Expression) *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gatewayServiceAccessControlDo) Returning(value interface{}, columns ...string) *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gatewayServiceAccessControlDo) Not(conds ...gen.Condition) *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gatewayServiceAccessControlDo) Or(conds ...gen.Condition) *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gatewayServiceAccessControlDo) Select(conds ...field.Expr) *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gatewayServiceAccessControlDo) Where(conds ...gen.Condition) *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gatewayServiceAccessControlDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *gatewayServiceAccessControlDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g gatewayServiceAccessControlDo) Order(conds ...field.Expr) *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gatewayServiceAccessControlDo) Distinct(cols ...field.Expr) *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gatewayServiceAccessControlDo) Omit(cols ...field.Expr) *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gatewayServiceAccessControlDo) Join(table schema.Tabler, on ...field.Expr) *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gatewayServiceAccessControlDo) LeftJoin(table schema.Tabler, on ...field.Expr) *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gatewayServiceAccessControlDo) RightJoin(table schema.Tabler, on ...field.Expr) *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gatewayServiceAccessControlDo) Group(cols ...field.Expr) *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gatewayServiceAccessControlDo) Having(conds ...gen.Condition) *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gatewayServiceAccessControlDo) Limit(limit int) *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gatewayServiceAccessControlDo) Offset(offset int) *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gatewayServiceAccessControlDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gatewayServiceAccessControlDo) Unscoped() *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gatewayServiceAccessControlDo) Create(values ...*model.GatewayServiceAccessControl) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gatewayServiceAccessControlDo) CreateInBatches(values []*model.GatewayServiceAccessControl, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gatewayServiceAccessControlDo) Save(values ...*model.GatewayServiceAccessControl) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gatewayServiceAccessControlDo) First() (*model.GatewayServiceAccessControl, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceAccessControl), nil
	}
}

func (g gatewayServiceAccessControlDo) Take() (*model.GatewayServiceAccessControl, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceAccessControl), nil
	}
}

func (g gatewayServiceAccessControlDo) Last() (*model.GatewayServiceAccessControl, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceAccessControl), nil
	}
}

func (g gatewayServiceAccessControlDo) Find() ([]*model.GatewayServiceAccessControl, error) {
	result, err := g.DO.Find()
	return result.([]*model.GatewayServiceAccessControl), err
}

func (g gatewayServiceAccessControlDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GatewayServiceAccessControl, err error) {
	buf := make([]*model.GatewayServiceAccessControl, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gatewayServiceAccessControlDo) FindInBatches(result *[]*model.GatewayServiceAccessControl, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gatewayServiceAccessControlDo) Attrs(attrs ...field.AssignExpr) *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gatewayServiceAccessControlDo) Assign(attrs ...field.AssignExpr) *gatewayServiceAccessControlDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gatewayServiceAccessControlDo) Joins(fields ...field.RelationField) *gatewayServiceAccessControlDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gatewayServiceAccessControlDo) Preload(fields ...field.RelationField) *gatewayServiceAccessControlDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gatewayServiceAccessControlDo) FirstOrInit() (*model.GatewayServiceAccessControl, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceAccessControl), nil
	}
}

func (g gatewayServiceAccessControlDo) FirstOrCreate() (*model.GatewayServiceAccessControl, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceAccessControl), nil
	}
}

func (g gatewayServiceAccessControlDo) FindByPage(offset int, limit int) (result []*model.GatewayServiceAccessControl, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gatewayServiceAccessControlDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g *gatewayServiceAccessControlDo) withDO(do gen.Dao) *gatewayServiceAccessControlDo {
	g.DO = *do.(*gen.DO)
	return g
}
