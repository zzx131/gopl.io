// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gopl.io/dal/model"
)

func newGatewayServiceTcpRule(db *gorm.DB) gatewayServiceTcpRule {
	_gatewayServiceTcpRule := gatewayServiceTcpRule{}

	_gatewayServiceTcpRule.gatewayServiceTcpRuleDo.UseDB(db)
	_gatewayServiceTcpRule.gatewayServiceTcpRuleDo.UseModel(&model.GatewayServiceTcpRule{})

	tableName := _gatewayServiceTcpRule.gatewayServiceTcpRuleDo.TableName()
	_gatewayServiceTcpRule.ALL = field.NewField(tableName, "*")
	_gatewayServiceTcpRule.ID = field.NewInt64(tableName, "id")
	_gatewayServiceTcpRule.ServiceID = field.NewInt64(tableName, "service_id")
	_gatewayServiceTcpRule.Port = field.NewInt64(tableName, "port")

	_gatewayServiceTcpRule.fillFieldMap()

	return _gatewayServiceTcpRule
}

type gatewayServiceTcpRule struct {
	gatewayServiceTcpRuleDo gatewayServiceTcpRuleDo

	ALL       field.Field
	ID        field.Int64
	ServiceID field.Int64
	Port      field.Int64

	fieldMap map[string]field.Expr
}

func (g gatewayServiceTcpRule) Table(newTableName string) *gatewayServiceTcpRule {
	g.gatewayServiceTcpRuleDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gatewayServiceTcpRule) As(alias string) *gatewayServiceTcpRule {
	g.gatewayServiceTcpRuleDo.DO = *(g.gatewayServiceTcpRuleDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gatewayServiceTcpRule) updateTableName(table string) *gatewayServiceTcpRule {
	g.ALL = field.NewField(table, "*")
	g.ID = field.NewInt64(table, "id")
	g.ServiceID = field.NewInt64(table, "service_id")
	g.Port = field.NewInt64(table, "port")

	g.fillFieldMap()

	return g
}

func (g *gatewayServiceTcpRule) WithContext(ctx context.Context) *gatewayServiceTcpRuleDo {
	return g.gatewayServiceTcpRuleDo.WithContext(ctx)
}

func (g gatewayServiceTcpRule) TableName() string { return g.gatewayServiceTcpRuleDo.TableName() }

func (g gatewayServiceTcpRule) Alias() string { return g.gatewayServiceTcpRuleDo.Alias() }

func (g *gatewayServiceTcpRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gatewayServiceTcpRule) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 3)
	g.fieldMap["id"] = g.ID
	g.fieldMap["service_id"] = g.ServiceID
	g.fieldMap["port"] = g.Port
}

func (g gatewayServiceTcpRule) clone(db *gorm.DB) gatewayServiceTcpRule {
	g.gatewayServiceTcpRuleDo.ReplaceDB(db)
	return g
}

type gatewayServiceTcpRuleDo struct{ gen.DO }

func (g gatewayServiceTcpRuleDo) Debug() *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.Debug())
}

func (g gatewayServiceTcpRuleDo) WithContext(ctx context.Context) *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gatewayServiceTcpRuleDo) Clauses(conds ...clause.Expression) *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gatewayServiceTcpRuleDo) Returning(value interface{}, columns ...string) *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gatewayServiceTcpRuleDo) Not(conds ...gen.Condition) *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gatewayServiceTcpRuleDo) Or(conds ...gen.Condition) *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gatewayServiceTcpRuleDo) Select(conds ...field.Expr) *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gatewayServiceTcpRuleDo) Where(conds ...gen.Condition) *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gatewayServiceTcpRuleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *gatewayServiceTcpRuleDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g gatewayServiceTcpRuleDo) Order(conds ...field.Expr) *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gatewayServiceTcpRuleDo) Distinct(cols ...field.Expr) *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gatewayServiceTcpRuleDo) Omit(cols ...field.Expr) *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gatewayServiceTcpRuleDo) Join(table schema.Tabler, on ...field.Expr) *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gatewayServiceTcpRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gatewayServiceTcpRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gatewayServiceTcpRuleDo) Group(cols ...field.Expr) *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gatewayServiceTcpRuleDo) Having(conds ...gen.Condition) *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gatewayServiceTcpRuleDo) Limit(limit int) *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gatewayServiceTcpRuleDo) Offset(offset int) *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gatewayServiceTcpRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gatewayServiceTcpRuleDo) Unscoped() *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gatewayServiceTcpRuleDo) Create(values ...*model.GatewayServiceTcpRule) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gatewayServiceTcpRuleDo) CreateInBatches(values []*model.GatewayServiceTcpRule, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gatewayServiceTcpRuleDo) Save(values ...*model.GatewayServiceTcpRule) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gatewayServiceTcpRuleDo) First() (*model.GatewayServiceTcpRule, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceTcpRule), nil
	}
}

func (g gatewayServiceTcpRuleDo) Take() (*model.GatewayServiceTcpRule, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceTcpRule), nil
	}
}

func (g gatewayServiceTcpRuleDo) Last() (*model.GatewayServiceTcpRule, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceTcpRule), nil
	}
}

func (g gatewayServiceTcpRuleDo) Find() ([]*model.GatewayServiceTcpRule, error) {
	result, err := g.DO.Find()
	return result.([]*model.GatewayServiceTcpRule), err
}

func (g gatewayServiceTcpRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GatewayServiceTcpRule, err error) {
	buf := make([]*model.GatewayServiceTcpRule, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gatewayServiceTcpRuleDo) FindInBatches(result *[]*model.GatewayServiceTcpRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gatewayServiceTcpRuleDo) Attrs(attrs ...field.AssignExpr) *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gatewayServiceTcpRuleDo) Assign(attrs ...field.AssignExpr) *gatewayServiceTcpRuleDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gatewayServiceTcpRuleDo) Joins(fields ...field.RelationField) *gatewayServiceTcpRuleDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gatewayServiceTcpRuleDo) Preload(fields ...field.RelationField) *gatewayServiceTcpRuleDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gatewayServiceTcpRuleDo) FirstOrInit() (*model.GatewayServiceTcpRule, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceTcpRule), nil
	}
}

func (g gatewayServiceTcpRuleDo) FirstOrCreate() (*model.GatewayServiceTcpRule, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GatewayServiceTcpRule), nil
	}
}

func (g gatewayServiceTcpRuleDo) FindByPage(offset int, limit int) (result []*model.GatewayServiceTcpRule, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gatewayServiceTcpRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g *gatewayServiceTcpRuleDo) withDO(do gen.Dao) *gatewayServiceTcpRuleDo {
	g.DO = *do.(*gen.DO)
	return g
}
